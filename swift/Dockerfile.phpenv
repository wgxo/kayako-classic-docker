#
# PHPenv Dockerfile
#
#
# NOTE: THIS DOCKERFILE IS GENERATED VIA "update.sh"
#
# PLEASE DO NOT EDIT IT DIRECTLY.
#

FROM debian:stretch-slim
MAINTAINER Valentin Andries <valentin.andries@gmail.com>

ENV DEBIAN_FRONTEND="noninteractive"

# prevent Debian's PHP packages from being installed
# https://github.com/docker-library/php/pull/542
RUN set -eux; \
	{ \
		echo 'Package: php*'; \
		echo 'Pin: release *'; \
		echo 'Pin-Priority: -1'; \
	} > /etc/apt/preferences.d/no-debian-php

# dependencies required for running "phpize"
# (see persistent deps below)
ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkg-config \
		re2c

# persistent / runtime deps
RUN apt-get update && apt-get install -y \
		$PHPIZE_DEPS \
		ca-certificates \
		curl \
		wget \
		xz-utils \
	--no-install-recommends && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /etc/php
RUN set -eux; \
	mkdir -p "$PHP_INI_DIR/conf.d"; \
# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)
	[ ! -d /var/www/html ]; \
	mkdir -p /var/www/html; \
	chown www-data:www-data /var/www/html; \
	chmod 777 /var/www/html

##<autogenerated>##
ENV APACHE_CONFDIR /etc/apache2
ENV APACHE_ENVVARS $APACHE_CONFDIR/envvars

RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends apache2; \
	rm -rf /var/lib/apt/lists/*; \
	\
# generically convert lines like
#   export APACHE_RUN_USER=www-data
# into
#   : ${APACHE_RUN_USER:=www-data}
#   export APACHE_RUN_USER
# so that they can be overridden at runtime ("-e APACHE_RUN_USER=...")
	sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS"; \
	\
# setup directories and permissions
	. "$APACHE_ENVVARS"; \
	for dir in \
		"$APACHE_LOCK_DIR" \
		"$APACHE_RUN_DIR" \
		"$APACHE_LOG_DIR" \
	; do \
		rm -rvf "$dir"; \
		mkdir -p "$dir"; \
		chown "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir"; \
# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)
		chmod 777 "$dir"; \
	done; \
	\
# delete the "index.html" that installing Apache drops in here
	rm -rvf /var/www/html/*; \
	\
# logs should go to stdout / stderr
	ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log"; \
	ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log"; \
	ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log"; \
	chown -R --no-dereference "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$APACHE_LOG_DIR"

# Apache + PHP requires preforking Apache for best results
RUN a2dismod mpm_event && a2enmod mpm_prefork

# PHP files should be handled by PHP, and should be preferred over any other file type
RUN { \
		echo '<FilesMatch \.php$>'; \
		echo '\tSetHandler application/x-httpd-php'; \
		echo '</FilesMatch>'; \
		echo; \
		echo 'DirectoryIndex disabled'; \
		echo 'DirectoryIndex index.php index.html'; \
		echo; \
		echo '<Directory /var/www/>'; \
		echo '\tOptions -Indexes'; \
		echo '\tAllowOverride All'; \
		echo '</Directory>'; \
	} | tee "$APACHE_CONFDIR/conf-available/docker-php.conf" \
	&& a2enconf docker-php

ENV PHP_EXTRA_BUILD_DEPS apache2-dev
ENV PHP_EXTRA_CONFIGURE_ARGS --with-apxs2 --disable-cgi
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV FETCH_DEPS dirmngr gnupg
RUN set -xe; \
	apt-get update; \
	apt-get install -y --no-install-recommends $FETCH_DEPS; \
	rm -rf /var/lib/apt/lists/*


RUN set -eux; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
	  apt-transport-https \
		libcurl4-openssl-dev \
		libedit-dev \
		libsqlite3-dev \
		libssl-dev \
		libxml2-dev \
		zlib1g-dev \
		${PHP_EXTRA_BUILD_DEPS:-} \
	; \
	rm -rf /var/lib/apt/lists/*; \
	debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; \
# https://bugs.php.net/bug.php?id=74125
	if [ ! -d /usr/include/curl ]; then \
		ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; \
	fi


# Install utils
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
RUN echo "deb https://download.docker.com/linux/debian stretch stable" > /etc/apt/sources.list.d/docker.list


RUN \
  apt-get update && apt-get -y install build-essential autoconf git libreadline-dev libxpm4 libxpm-dev libjpeg-dev libfreetype6-dev libc-client-dev file binutils gdb apache2-dbg

# Install PHPenv  
RUN mkdir -p /home && \
    curl -L https://raw.githubusercontent.com/phpenv/phpenv-installer/master/bin/phpenv-installer | PHPENV_ROOT="/home/.phpenv" bash

RUN   echo 'export PATH="/.phpenv/bin:$PATH"' >> ~/.bash_profile && \
      echo 'eval "$(phpenv init -)"' >> ~/.bash_profile && \
      cd /home/.phpenv && \
      exec $SHELL && \
      ./bin/phpenv rehash

# Complete ENV
ENV PATH /home/.phpenv/bin:/home/.phpenv/shims:$PATH
ENV PHP_BUILD_ROOT /home/.phpenv
ENV PHPENV_ROOT /home/.phpenv

RUN apt-get install -y libbz2-dev libmcrypt-dev libpng-dev libc-client-dev libkrb5-dev libzip-dev \
		libreadline-dev libxpm4 libxpm-dev libjpeg-dev libfreetype6-dev libtidy-dev libxslt1-dev

RUN PHP_BUILD_CONFIGURE_OPTS="--with-openssl --enable-debug --with-kerberos --with-imap=shared --with-imap-ssl=/usr --with-zip --with-gd --with-pdo-mysql --with-simplexml --with-jpeg-dir --with-freetype-dir --with-apxs2 --disable-cgi" phpenv install --verbose 7.1.26

RUN phpenv global 7.1.26 && phpenv rehash

# Install pear, pecl, xdebug and uopz
RUN curl -Ls -o /tmp/pear.phar http://pear.php.net/install-pear-nozlib.phar && php /tmp/pear.phar
RUN phpenv rehash
RUN pecl config-set php_ini $(php-config --prefix)/etc/php.ini && \
    pear config-set php_ini $(php-config --prefix)/etc/php.ini
RUN pecl channel-update pecl.php.net
RUN pecl -q install xdebug uopz 

# Configure PHP settings
RUN sed -i '/extension="xdebug.so"/d' $(php-config --prefix)/etc/php.ini
RUN perl -pi -e 's[;(date.timezone =).*][\1 "UTC"]' $(php-config --prefix)/etc/php.ini
RUN perl -pi -e 's[memory_limit = 128M][memory_limit = -1]' $(php-config --prefix)/etc/php.ini
# disable sendmail during tests
RUN perl -pi -e "s[^.*sendmail_path.*$][sendmail_path = /bin/false]" $(php-config --prefix)/etc/php.ini


# Set default PHP version
RUN phpenv global 7.1.26 && phpenv rehash

# Install composer
RUN curl -Lso- https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Map SWIFT trunk directory to this volume
VOLUME /home/swift
WORKDIR /home/swift/trunk

RUN a2enmod proxy rewrite

# Debugging helpers
RUN mkdir /var/coredumps && touch /var/log/php.log && chown www-data:www-data /var/coredumps /var/log/php.log && chmod 777 /var/coredumps
VOLUME /var/coredumps
RUN echo "CoreDumpDirectory /var/coredumps" >> /etc/apache2/apache2.conf

RUN ln -s /usr/src/php/.gdbinit ~/.gdbinit

RUN apt-get install -y icu-devtools libicu-dev gdb html2text mysql-client

RUN mkdir ~/bin; echo "cd /home/swift/trunk/staff; PATH_INFO=/Core/Default/RebuildCache php index.php|html2text" > ~/bin/rebuildcache && chmod +x ~/bin/rebuildcache && echo 'PATH=$PATH:~/bin' >> ~/.bashrc

RUN echo "[mysql]\nhost=mysql\nuser=root\npassword=OGYxYmI1OTUzZmM\ndatabase=swift\n\n[mysqladmin]\nhost=mysql\nuser=root\npassword=OGYxYmI1OTUzZmM\n\n[mysqldump]\nhost=mysql\nuser=root\npassword=OGYxYmI1OTUzZmM\n" > ~/.my.cnf

RUN echo 'echo "*** TO INSTALL SWIFT USE ***\n\nphp ./console.setup.php Trilogy \"http%3A%2F%2Fkayako-dev%2F\" Kayako Admin admin admin virlatinus%40gmail.com\n\n"' > ~/.bashrc

RUN useradd -G www-data -u 1000 wgarcia
#RUN cp /usr/local/etc/php/php.ini-development /usr/local/etc/php/php.ini

RUN echo "extension=imap.so" > $(php-config --prefix)/etc/conf.d/imap.ini

# clean up
RUN	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $FETCH_DEPS

COPY apache2-foreground docker-php-ext* /usr/local/bin/

ADD vhost.conf /etc/apache2/sites-enabled/001-swift.conf

RUN perl -pi -e 's[#ServerName .*][ServerName kayako-dev]' /etc/apache2/sites-enabled/000-default.conf

RUN cat /etc/apache2/sites-enabled/000-default.conf|perl -pe 's[DocumentRoot .*][DocumentRoot /var/www/html/magento1]' | perl -pe 's[ServerName .*][ServerName mage1.kayako-dev.local]' > /etc/apache2/sites-enabled/002-magento1.conf

RUN cat /etc/apache2/sites-enabled/000-default.conf|perl -pe 's[DocumentRoot .*][DocumentRoot /var/www/html/magento2]' | perl -pe 's[ServerName .*][ServerName mage2.kayako-dev.local]' > /etc/apache2/sites-enabled/003-magento2.conf

RUN cat /etc/apache2/sites-enabled/000-default.conf|perl -pe 's[DocumentRoot .*][DocumentRoot /var/www/html/samlidp/www]' | perl -pe 's[ServerName .*][ServerName saml.kayako-dev.local]' > /etc/apache2/sites-enabled/004-samlidp.conf

RUN echo ServerName kayako-dev >> /etc/apache2/apache2.conf

EXPOSE 80
CMD ["apache2-foreground"]

RUN echo "alias xdebug-on=\"docker-php-ext-enable xdebug\"" >> ~/.bashrc
RUN echo "alias xdebug-off=\"php -i|grep xdebug.ini|sed 's/.$//'|xargs rm\"" >> ~/.bashrc

RUN rm -rf /tmp/* rm -rf /usr/src/*

#RUN perl -pi -e 's[zend_extension_debug="xdebug.so"][;zend_extension_debug="xdebug.so"]' $(php-config --prefix)/etc/php.ini && \
#    perl -pi -e 's[zend_extension=][;zend_extension=]' $(php-config --prefix)/etc/conf.d/xdebug.ini

RUN perl -pi -e 's[display_errors\s*=.*][display_errors=1]' $(php-config --prefix)/etc/php.ini
RUN perl -pi -e 's[html_errors\s*=.*][html_errors=1]' $(php-config --prefix)/etc/php.ini
